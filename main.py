from aiogram import types
from aiogram.dispatcher import FSMContext
from config import dp, bot
from database import Task, Priority, Template
from keyboards import *
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    text = "üìù Todo Bot: –£–ø—Ä–∞–≤–ª—è–π –∑–∞–¥–∞—á–∞–º–∏ –∫–∞–∫ –ø—Ä–æ—Ñ–∏!"
    await message.answer(text, reply_markup=main_keyboard())

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
@dp.message_handler(commands=['add_task'])
async def add_task(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=priority_keyboard())

@dp.callback_query_handler(lambda c: c.data.startswith('priority'))
async def set_priority(callback: types.CallbackQuery):
    priority = callback.data.split('_')[1]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    # ... (–ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ FSM)

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message_handler(commands=['stats'])
async def show_stats(message: types.Message):
    tasks = get_user_tasks(message.from_user.id)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –∏–∑ –ë–î
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(10,5))
    categories = [t.category for t in tasks]
    plt.hist(categories, bins=len(set(categories)))
    plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    plt.savefig('stats.png')
    
    await message.answer_photo(photo=open('stats.png', 'rb'))

# –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∞)
async def check_postponed_tasks():
    tasks = session.query(Task).filter(Task.postponed_count > 3).all()
    for task in tasks:
        await bot.send_message(
            task.user_id,
            f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ '{task.title}' –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è {task.postponed_count} —Ä–∞–∑. –ú–æ–∂–µ—Ç, –µ—ë —É–¥–∞–ª–∏—Ç—å?",
            reply_markup=postponed_keyboard(task.id)
        )

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
@dp.message_handler(commands=['apply_template'])
async def apply_template(message: types.Message):
    templates = get_user_templates(message.from_user.id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:", reply_markup=templates_keyboard(templates))
